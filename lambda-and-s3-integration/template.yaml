AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for sam-s3input-sample

Parameters:
  BucketName:
    Type: String
    Default: "sam-sample-s3input-v123456789"
    Description: Enter Read bucket name Default is t2.micro!?
  BucketNameWrite:
    Type: String
    Default: "sam-sample-s3output-v999999999"
  QueueNameOut:
    Type: String
    Default: 'sam-sample-queueOut'
  MailTableName:
    Type: String
    Default: 'sam-sample-mailaddress'

Globals:
  Function:
    Timeout: 3
    MemorySize: 128 # package typeがimageの場合必須ぽい？

Resources:
  #SNS topic
  SnsBounceTopic:
    Type: AWS::SNS::Topic
  #SQS Que
  SqsOutput:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueNameOut 
  SQSPolicy: #リソースベースポリシー Allow from lambda function
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SqsOutput
      PolicyDocument:
        Version: 2012-10-17
        Id: AllowLambda
        Statement:
          - Sid: 1
            Effect: Allow
            Principal: 
              AWS: !GetAtt SendQueueFunctionRole.Arn
            Action:
              - sqs:*
            Resource: "*"
  # S3
  S3InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  #Dynamo DB Table
  DynamoDbMailTable:
    Type: AWS::DynamoDB::Table
#    DeletionPolicy: Retain
    Properties:
      TableName: !Ref MailTableName
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: haserror
          AttributeType: N
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      GlobalSecondaryIndexes:
        - IndexName: haserror-index
          KeySchema:
            - AttributeName: haserror
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        

  # Lambda
  SendQueueFunction:
    Type: AWS::Serverless::Function
#ロールを自動で作成するために、└─$ sam deploy --guided --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND　で実行する
    Properties:
      CodeUri: send_queue/
      PackageType: Image
#      CodeUri: hello_world/
#      Handler: app.lambda_handler
#      Runtime: python3.9
      Architectures:
        - x86_64
#      Layers:
#        - !Ref MyLayer
      Events: #SAMでは既存のバケットは参照できない仕様。lambdaのリソースベースポリシーに設定される。
        S3UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3InputBucket
            Events: s3:ObjectCreated:*
      Policies: # 書き込み権限の付与(おもにinline)
        - DynamoDBCrudPolicy:
            TableName: !Ref MailTableName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SqsOutput.QueueName
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./send_queue
      DockerTag: python3.9-v1
  SendMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_mail/
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        SendMailEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsOutput.Arn
            BatchSize: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MailTableName
        - S3ReadPolicy:
            BucketName: !Ref S3InputBucket
        - SESCrudPolicy:
            IdentityName: 'aa@example.com'
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./send_mail
      DockerTag: python3.9-v1
  BounceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bounce/
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        BounceMailEvent:
          Type: SNS
          Properties:
            Topic: !Ref SnsBounceTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDbMailTable
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./bounce
      DockerTag: python3.9-v1
  #Layerの作成 コンテナイメージの場合必要なさそう？
#  MyLayer:
#    Type: AWS::Serverless::LayerVersion
#    Properties:
#      ContentUri: 'mylayer/'
#      CompatibleRuntimes:
#        - python3.9
#    Metadata:
#      BuildMethod: python3.9
Outputs:
  SendQueueFunction:
    Description: "Send Que Lambda Function ARN"
    Value: !GetAtt SendQueueFunction.Arn
  SendQueueFunctionRoleArn:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt SendQueueFunctionRole.Arn
  BounceFunctionArn:
    Value: !GetAtt BounceFunction.Arn
  BounceFunctionRoleArn:
    Value: !GetAtt BounceFunctionRole.Arn 
  SendMailFunctionArn:
    Value: !GetAtt SendMailFunction.Arn
  SendMailFunctionRoleArn:
    Value: !GetAtt SendMailFunctionRole.Arn
  S3InputBucketArn:
    Description: "Hello World S3 ARN"
    Value: !GetAtt S3InputBucket.Arn
  SqsOutputArn:
    Value: !GetAtt SqsOutput.Arn
  SnsBounceTopicArn:
    Value: !Ref SnsBounceTopic
  DynamoDbMailTableName:
    Value: !Ref DynamoDbMailTable
